image:
  repository: registry.local/library/influxdb
  tag: 2.7.4-alpine
  pullPolicy: IfNotPresent
  ## If specified, use these secrets to access the images
  # pullSecrets:
  #   - registry-secret

resources:
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  limits:
   cpu: 500m
   memory: 1024Mi
  requests:
   cpu: 500m
   memory: 1024Mi

livenessProbe:
  path: "/health"
  scheme: "HTTP"
  initialDelaySeconds: 0
  periodSeconds: 10
  timeoutSeconds: 1
  failureThreshold: 3

# readinessProbe:
#   path: "/health"
#   scheme: "HTTP"
#   initialDelaySeconds: 0
#   periodSeconds: 10
#   timeoutSeconds: 1
#   successThreshold: 1
#   failureThreshold: 3

startupProbe:
  enabled: true
  path: "/health"
  scheme: "HTTP"
  initialDelaySeconds: 30
  periodSeconds: 5
  timeoutSeconds: 1
  failureThreshold: 6

## Extra environment variables to configure influxdb
## e.g.
# Нужно предварительно создать секрет influxdb-secrets с нужными значениями и паролями
env:
  - name: INFLUXDB_TOKEN
    valueFrom:
      secretKeyRef:
        name: influxdb-secrets
        key: influxdb_token
  - name: INFLUXDB_USER
    valueFrom:
      secretKeyRef:
        name: influxdb-secrets
        key: influxdb_user
  - name: INFLUXDB_PASSWORD
    valueFrom:
      secretKeyRef:
        name: influxdb-secrets
        key: influxdb_password

adminUser:
  organization: "1234"
  bucket: "vcenter"
  user: "${INFLUXDB_USER}"
  retention_policy: "0s"
  ## Leave empty to generate a random password and token.
  ## Or fill any of these values to use fixed values.
  password: "${INFLUXDB_PASSWORD}"
  ## Можем сгенерировать заранее 
  ## head -c 27 /dev/urandom | base64 | head -c 36
  token: "${INFLUXDB_TOKEN}"

## Persist data to a persistent volume
##
persistence:
  enabled: true
  ## If true will use an existing PVC instead of creating one
  # useExisting: false
  ## Name of existing PVC to be used in the influx deployment
  # name:
  ## influxdb data Persistent Volume Storage Class
  ## If defined, storageClassName: <storageClass>
  ## If set to "-", storageClassName: "", which disables dynamic provisioning
  ## If undefined (the default) or set to null, no storageClassName spec is
  ##   set, choosing the default provisioner.  (gp2 on AWS, standard on
  ##   GKE, AWS & OpenStack)
  ##
  storageClass: "fujitsu-dx200-ssd"
  accessMode: ReadWriteOnce
  size: 50Gi

ingress:
  enabled: true
  # For Kubernetes >= 1.18 you should specify the ingress-controller via the field ingressClassName
  # See https://kubernetes.io/blog/2020/04/02/improvements-to-the-ingress-api-in-kubernetes-1.18/#specifying-the-class-of-an-ingress
  className: nginx
  tls: false
  # secretName: my-tls-cert # only needed if tls above is true or default certificate is not configured for Nginx
  hostname: influxdb.sztu-kubs-01
  annotations: {}
    # kubernetes.io/ingress.class: "nginx"
    # kubernetes.io/tls-acme: "true"
  path: /
